---
title: "Understanding Randomess & Chance with Numpy"
author: "Russ Zaliznyak"
date: "2024-10-18"
execute:
  echo: false
format: 
  html: 
    css: style.css
    toc: true
    toc-depth: 2
jupyter: python3
---


## Introduction
Imagine your website converts 10% of its visitors to paying customers. Over the course of 1,000 visitors, how many converts should we expect? A quick back of the envelope calculation shows we should expect 100 conversions:
$$
1000 \, \text{visitors} * \frac{10 \, \text{conversions}}{100 \, \text{visitors}} = 100 \, \text{conversions}
$$


_But how much could that number vary each time we run this experiment?_

# Simulating Data

Website conversion follows the _binomial distribution_.
$$
P(X = k) = \binom{n}{k} p^k (1-p)^{n-k}
$$

Where n = 1000 (trials) and p = 0.10 (conversion rate).
Below we simulate running and repeating this experiment 100,000x.


```{python}
#| code-fold: false
#| echo: true

from numpy.random import binomial, seed
seed(20)

conversion_rate = 0.10
number_of_visitors = int(1e3)


number_simulated_experiments = int(1e5)
control_simulated_results = binomial(
    number_of_visitors, conversion_rate, size=number_simulated_experiments
)


```


## Examining Results

At the end of each simulation, we record and plot how many conversions took place. Each panel represents the results of plotting more simulations together.

Our first experiment only generated 82 conversions. But with enough simulated experiments plotted together, are you seeing a pattern develop?

```{python}
#| label: fig-scenario-one-plot
#| fig-cap: Histograms of the aforementioned simulated experiments. With enougn simulations, it's possible to see website conversion forms a predictable pattern.
#| code-fold: true
#| echo: true

import plotly.subplots as sp
import pandas as pd
import plotly.express as px
from math import ceil
from numpy import where, linspace, min, max, cumsum, percentile


df = pd.DataFrame(control_simulated_results, columns=["value"])
running_total_df = df.copy()

# Count occurrences and create a running total
running_total_df["count"] = running_total_df["value"].map(
    running_total_df["value"].value_counts()
)
running_total_df["running_total"] = running_total_df.groupby("value").cumcount() + 1

# Rearranging to match the running total of occurrences
running_total_df = running_total_df[["value", "count", "running_total"]]



number_experiments_list = [
    1,
    50,
    200,
    400,
    800,
    2500,
    10000,
    number_simulated_experiments,
]
subplot_titles = tuple([f"# sims = {value}" for value in number_experiments_list])
number_experiments_list_length = len(number_experiments_list)


number_cols = 4
number_rows = ceil(number_experiments_list_length / number_cols)

fig = sp.make_subplots(
    rows=number_rows,
    cols=number_cols,
    subplot_titles=subplot_titles,
    vertical_spacing=0.1,
)

for j in range(len(number_experiments_list)):
    number = number_experiments_list[j]
    fig_0 = px.scatter(
        running_total_df[0:number],
        x="value",
        y="running_total",
    )

    row = 1 + int(j / number_cols)
    col = 1 + j - (row - 1) * number_cols
    fig.add_trace(fig_0.data[0], row=row, col=col)


fig.update_layout(height=600)
x_ticks = [80, 100, 120]
for j in range(len(number_experiments_list)):
    row = 1 + int(j / number_cols)
    col = 1 + j - (row - 1) * number_cols

    fig.update_xaxes(
        tickvals=x_ticks if j > 0 else [int(df["value"].iloc[0])], row=row, col=col
    )

fig.show()

```

<!--
The cumulative distribution function (CDF) is defined as:
$$
P(X \leq k) = \sum_{i=0}^{k} \binom{n}{i} p^i (1-p)^{n-i}
$$
-->


## Use Simulation Results to Estimate Randomness 

- What's the chance of 82 conversions or fewer?
- What's the chance of 110 conversion or more?
- What's the chance of between 90 and 110 conversions?


```{python}
#| code-fold: true
#| echo: true
import plotly.graph_objects as go
from scipy import stats


BLUE = "#0177c9"
RED = "#bd0707"
number_points = 250
pdf = stats.gaussian_kde(control_simulated_results)
X = linspace(min(control_simulated_results), max(control_simulated_results), number_points)
estimated_density = pdf.evaluate(X)
cumulative_density = cumsum(estimated_density)
cumulative_density /= cumulative_density[-1]
cdf_list = list(cumulative_density)
fx_list = estimated_density

hover_string = "True Baseline"
is_rate = False
text_list = [
    f"Pr( {hover_string} > { round((100 if is_rate else 1)*X[j],3 if is_rate else 2) }{'%' if is_rate else ''}) = {'{0:.2%}'.format(1 - cdf_list[j])}"
    for j in range(len(X))
]

final_figure = sp.make_subplots(
    rows=1,
    cols=3,
    subplot_titles=("One", "Two", "Three"),
    vertical_spacing=0.1,
)

for j in range(3):

  distribution_figure = go.Figure(
          [
              go.Scatter(
                  x=X,
                  y=fx_list,
                  hoverinfo="skip",
                  #marker_symbol="square",
                  name="< 0 ",
                  marker=dict(size=50),
                  showlegend=True,
                  line_color=BLUE,
                  #hovertext=text_list[:positive_position],
                  # fill = "blue",
                  line=dict(width=0.05),
                  stackgroup="1",
              ),
              go.Scatter(
                  x=X,
                  y=fx_list,
                  hoverinfo="text",
                  # fill='tozeroy',
                  mode="lines",
                  # name = "+" ,
                  showlegend=False,
                  line_color="black",
                  hovertext=text_list,
                  line=dict(width=1.5),
              )
          ])


  tick_values = [
          percentile(control_simulated_results, 5),
          percentile(control_simulated_results, 50),
          percentile(control_simulated_results, 95),
      ]
  distribution_figure.update_xaxes(
      zeroline=False,
      tickangle=0,
      #title = "" if x_axis_title is None else x_axis_title,
      tickvals=tick_values,
      title_font=dict(size=15),
      ticks="inside",  # Default is 'outside'
      ticklen=6,
  )
  distribution_figure.update_yaxes(
      title="",
      visible=False,
      showticklabels=False,
  )
  distribution_figure.update_traces(hoverlabel=dict(font=dict(size=18)))
  distribution_figure.update_layout(showlegend = False,

  autosize=True,
          margin=dict(l=0, r=0, b=35, t=0),
          hovermode="x", xaxis=dict(tickfont=dict(size=13)),
          title="",
          legend=dict(
              font=dict(size=15),
              x = 0.02,
          )

  )
  final_figure.add_trace(distribution_figure.data[0], row=1, col=j+1)
final_figure.update_layout(showlegend = False)
final_figure.update_xaxes(
    zeroline=False,
    tickangle=0,
    #title = "" if x_axis_title is None else x_axis_title,
    tickvals=tick_values,
    title_font=dict(size=15),
    ticks="inside",  # Default is 'outside'
    ticklen=6,
)
final_figure.update_yaxes(
      title="",
      visible=False,
      showticklabels=False,
  )
final_figure.update_layout(height=400)
final_figure.show()






```